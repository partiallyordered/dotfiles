
### Filter an array on content
```sh
jq '.path.to.array[] | select(.property == "value-of-interest")'
```

### Update a value in an array based on content
```sh
jq '(.path.to.array[] | select(.property == "value-of-interest") | .propertyToUpdate) |= "hello"'
```
See also: https://stedolan.github.io/jq/manual/#Assignment

### Base64 decode values
```sh
echo '{ "data": "$base64encoded value" }' | jq '.data | @base64d'
```

### Map over an object
```sh
echo '{ "data": { "key": "$base64encoded value" } }' | jq '.data | map_values(@base64d)'
```

### Examples
Filters a list for Kubernetes Ingress resources, filters their rules and interpolates content in a
string to output `"$host/path service:port"`.
```sh
kubectl get ingress -o json | jq -r '.items[] | select(.kind == "Ingress") | .spec.rules[] | "\(.host)\(.http.paths[0].path) \(.http.paths[0].backend.serviceName):\(.http.paths[0].backend.servicePort)"' | sort | column -t
```

Delete a range of resources in default namespace.
```sh
kubectl delete $(kubectl get all -n default -o json | jq '.items[] | "\(.kind)/\(.metadata.name)"' -r)
```
