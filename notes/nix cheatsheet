
#### Update flake
Update all inputs:
```sh
nix flake update
```
Update single input:
```sh
nix flake lock --update-input home-manager
```

#### Install nix on running Ubuntu docker image
```sh
# install prerequisites for the script
apt-get update && apt-get install -y xz-utils curl
NEW_USER="gandalf"
# create the user
useradd -m $NEW_USER
# create the nix store directory, owned by the new user's user/group
install -d -m755 -o $NEW_USER -g $NEW_USER /nix
# enter a login shell as the new user
su -l $NEW_USER
# single-user nix install
curl -L https://nixos.org/nix/install | sh
# bring nix and installed packages into PATH
. $HOME/.nix-profile/etc/profile.d/nix.sh
# if you need to log out of $NEW_USER, be sure to log in again with `su -l $NEW_USER` to ensure
# .profile etc. are sourced
```

#### Node packages
https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/node-packages/node-packages.json

#### Clear out stuff older than a certain date
E.g. 30 days:
```sh
nix-collect-garbage --delete-older-than 30d
```

#### Roll back NixOS
To the last generation:
```sh
nixos-rebuild switch --rollback
```
To a specific generation:
```sh
GENERATION=12345
sudo nix-env --switch-generation "$GENERATION" -p /nix/var/nix/profiles/system
sudo /nix/var/nix/profiles/system/bin/switch-to-configuration switch
```
See also: https://github.com/NixOS/nixpkgs/issues/24374#issuecomment-738712420

#### List generations
System profile:
```sh
nix-env --list-generations --profile /nix/var/nix/profiles/system
```
Active profile:
```sh
nix-env --list-generations
```

#### Nix rebuild offline (without internet)
```sh
sudo nixos-rebuild switch --option binary-caches ""
```

#### Enter REPL:
```sh
nix repl
```

#### List imperatively installed packages
```sh
nix-env -q
```
Remove them:
```sh
nix-env -e package-name
```

#### Find package:
```sh
nix-env -qaP [package-name]
```
or, faster:
```sh
nix-env -f '<nixpkgs>' -qaP -A [package-name]
```
modern, search the nixpkgs flake for blender:
```sh
nix search nixpkgs blender
```

#### Start shell with specific package installed:
```sh
nix-shell -p kubectl kubernetes-helm socat jq
```

#### System upgrade:
```sh
nixos-rebuild switch --upgrade
```

#### List files installed by package:
```sh
tree $(dirname $(dirname $(readlink -f $(which vim))))
```
Slightly more generally (from https://nixos.wiki/wiki/Cheatsheet ):
```sh
$ readlink -f $(which vim)
 /nix/store/ji06y4haijly0i0knmr986l2dajffv1p-emacs-24.4/bin/emacs-24.4
```
then
```sh
du -a /nix/store/ji06y4haijly0i0knmr986l2dajffv1p-emacs-24.4
```

#### Temporarily install package
```sh
nix-env -iA nixos.sxiv
# when finished
nix-env -e sxiv # don't know why this needs to be unqualified
```

#### Get hash of input from URL:
```sh
nix-prefetch-url mirror://pypi/g/grpclib/grpclib-0.3.1.tar.gz
```
For github, note `--unpack`:
```sh
nix-prefetch-url --unpack https://github.com/cstrahan/vim-capnp/archive/954202e2c6c1cb9185082de8ddb7f2823a9d1206.tar.gz
```

### Trace:
```nix
{ a, b ? 3, trueMsg ? "yes", falseMsg ? "no" }:
if a > b
  then builtins.trace trueMsg true
  else builtins.trace falseMsg false
```

### Share dependencies with others
`default.nix`:
```nix
# pin with e.g.
#   { pkgs ? import (fetchTarball "https://github.com/NixOS/nixpkgs/archive/3590f02e7d5760e52072c1a729ee2250b5560746.tar.gz")) {} }:
# see also: https://nixos.org/guides/towards-reproducibility-pinning-nixpkgs.html
{ pkgs ? import <nixpkgs> {  } }:

let kubefwd = pkgs.stdenv.mkDerivation rec {
  version = "1.18.1";
  pname = "kubefwd";

  src = builtins.fetchurl {
    url = "https://github.com/txn2/kubefwd/releases/download/${version}/kubefwd_Linux_x86_64.tar.gz";
    sha256 = "1864jayfczlyliz6h7gybrjrfnyabshc0kpbxvavp6ni9r6pm489";
  };

  unpackPhase = ''
    tar xf $src
  '';

  installPhase = ''
      install -m755 -D kubefwd $out/bin/kubefwd
  '';
};

in

[
  pkgs.terraform_0_14
  pkgs.python39Packages.jsonschema
  pkgs.jq
  kubefwd
]
```

`shell.nix`:
```nix
# pin with e.g.
#   { pkgs ? import (fetchTarball "https://github.com/NixOS/nixpkgs/archive/3590f02e7d5760e52072c1a729ee2250b5560746.tar.gz")) {} }:
# see also: https://nixos.org/guides/towards-reproducibility-pinning-nixpkgs.html
{ pkgs ? import <nixpkgs> {} }:
pkgs.mkShell {
  nativeBuildInputs = import ./default.nix { inherit pkgs; };
}
```

Now anyone with `nix` can run `nix-shell shell.nix` to get a shell containing the same packages as
the author.

### Links
https://nixos.wiki/wiki/Packaging/Examples
