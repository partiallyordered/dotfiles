
#### Nix rebuild without internet
```sh
sudo nixos-rebuild switch --option binary-caches ""
```

#### Enter REPL:
```sh
nix repl
```

#### Find package:
```sh
nix-env -qaP [package-name]
```
or, faster:
```sh
nix-env -f '<nixpkgs>' -qaP -A [package-name]
```
modern:
```sh
nix search <package-name>
```

#### Start shell with specific package installed:
```sh
nix-shell -p kubectl kubernetes-helm socat jq
```

#### System upgrade:
```sh
nixos-rebuild switch --upgrade
```

#### List files installed by package:
```sh
tree $(dirname $(dirname $(readlink -f $(which vim))))
```
Slightly more generally (from https://nixos.wiki/wiki/Cheatsheet ):
```sh
$ readlink -f $(which vim)
 /nix/store/ji06y4haijly0i0knmr986l2dajffv1p-emacs-24.4/bin/emacs-24.4
```
then
```sh
du -a /nix/store/ji06y4haijly0i0knmr986l2dajffv1p-emacs-24.4
```

#### Temporarily install package
```sh
nix-env -iA nixos.sxiv
# when finished
nix-env -e sxiv # don't know why this needs to be unqualified
```

#### Get hash of input from URL:
```sh
nix-prefetch-url mirror://pypi/g/grpclib/grpclib-0.3.1.tar.gz
```

### Trace:
```nix
{ a, b ? 3, trueMsg ? "yes", falseMsg ? "no" }:
if a > b
  then builtins.trace trueMsg true
  else builtins.trace falseMsg false
```

### Share dependencies
`default.nix`:
```nix
# pin with e.g.
#   { pkgs ? import (fetchTarball "https://github.com/NixOS/nixpkgs/archive/3590f02e7d5760e52072c1a729ee2250b5560746.tar.gz")) {} }:
# see also: https://nixos.org/guides/towards-reproducibility-pinning-nixpkgs.html
{ pkgs ? import <nixpkgs> {  } }:

let kubefwd = pkgs.stdenv.mkDerivation rec {
  version = "1.18.1";
  pname = "kubefwd";

  src = builtins.fetchurl {
    url = "https://github.com/txn2/kubefwd/releases/download/${version}/kubefwd_Linux_x86_64.tar.gz";
    sha256 = "1864jayfczlyliz6h7gybrjrfnyabshc0kpbxvavp6ni9r6pm489";
  };

  unpackPhase = ''
    tar xf $src
  '';

  installPhase = ''
      install -m755 -D kubefwd $out/bin/kubefwd
  '';
};

in

[
  pkgs.terraform_0_14
  pkgs.python39Packages.jsonschema
  pkgs.jq
  kubefwd
]
```

`shell.nix`:
```nix
# pin with e.g.
#   { pkgs ? import (fetchTarball "https://github.com/NixOS/nixpkgs/archive/3590f02e7d5760e52072c1a729ee2250b5560746.tar.gz")) {} }:
# see also: https://nixos.org/guides/towards-reproducibility-pinning-nixpkgs.html
{ pkgs ? import <nixpkgs> {} }:
pkgs.mkShell {
  nativeBuildInputs = import ./default.nix { inherit pkgs; };
}
```

Now anyone with `nix` can run `nix-shell shell.nix` to get a shell containing the same packages as
the author.

### Links
https://nixos.wiki/wiki/Packaging/Examples
